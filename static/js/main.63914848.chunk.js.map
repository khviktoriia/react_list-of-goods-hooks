{"version":3,"sources":["App.tsx","index.tsx"],"names":["SortField","goodsFromServer","App","useState","Default","sortField","setSortField","isReversed","setIsReversed","visibleGoods","goods","options","preparedGoods","sort","good1","good2","Name","localeCompare","Length","length","reverse","getPreparedGoods","isResetVisible","className","type","cn","onClick","map","good","replaceAll","ReactDOM","render","document","getElementById"],"mappings":"6KAOKA,E,oFAAAA,K,gBAAAA,E,YAAAA,E,YAAAA,M,KAWE,IAAMC,EAAkB,CAC7B,YACA,SACA,OACA,YACA,QACA,QACA,OACA,QACA,MACA,UA4BK,IAAMC,EAAgB,WAC3B,MAAkCC,mBAAoBH,EAAUI,SAAhE,mBAAOC,EAAP,KAAkBC,EAAlB,KACA,EAAoCH,oBAAS,GAA7C,mBAAOI,EAAP,KAAmBC,EAAnB,KACMC,EA5BR,SAA0BC,EAAeC,GACvC,IAAIC,EAAqB,YAAOF,GAqBhC,OAnBIC,EAAQN,WACVO,EAAcC,MAAK,SAACC,EAAOC,GACzB,OAAQJ,EAAQN,WACd,KAAKL,EAAUgB,KACb,OAAOF,EAAMG,cAAcF,GAE7B,KAAKf,EAAUkB,OACb,OAAOJ,EAAMK,OAASJ,EAAMI,OAE9B,QACE,OAAO,MAKXR,EAAQJ,aACVK,EAAgBA,EAAcQ,WAGzBR,EAMcS,CACnBpB,EAAiB,CAAEI,YAAWE,eAG1Be,EAAiBjB,GAAaE,EAOpC,OACE,sBAAKgB,UAAU,kBAAf,UACE,sBAAKA,UAAU,UAAf,UACE,wBACEC,KAAK,SACLD,UAAWE,IAAG,SAAU,UAAW,CACjC,WAAYpB,IAAcL,EAAUgB,OAEtCU,QAAS,kBAAMpB,EAAaN,EAAUgB,OALxC,iCAUA,wBACEQ,KAAK,SACLD,UAAWE,IAAG,SAAU,aAAc,CACpC,WAAYpB,IAAcL,EAAUkB,SAEtCQ,QAAS,kBAAMpB,EAAaN,EAAUkB,SALxC,4BAUA,wBACEM,KAAK,SACLD,UAAWE,IAAG,SAAU,aAAc,CACpC,YAAalB,IAEfmB,QAAS,kBAAMlB,GAAeD,IALhC,qBAUCe,GACC,wBACEE,KAAK,SACLD,UAAU,4BACVG,QA1CV,WACElB,GAAc,GACdF,EAAaN,EAAUI,UAqCjB,sBAUJ,6BACE,6BACGK,EAAakB,KAAI,SAAAC,GAAI,OACpB,oBAAI,UAAQ,OAAZ,SACGA,GADqBA,EAAKC,WAAW,MAAO,iBClH3DC,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.63914848.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport cn from 'classnames';\nimport 'bulma/css/bulma.css';\nimport './App.scss';\n\ntype Good = string;\n\nenum SortField {\n  Length = 'length',\n  Name = 'name',\n  Default = '',\n}\n\ninterface Options {\n  sortField: SortField,\n  isReversed: boolean,\n}\n\nexport const goodsFromServer = [\n  'Dumplings',\n  'Carrot',\n  'Eggs',\n  'Ice cream',\n  'Apple',\n  'Bread',\n  'Fish',\n  'Honey',\n  'Jam',\n  'Garlic',\n];\n\nfunction getPreparedGoods(goods: Good[], options: Options): Good[] {\n  let preparedGoods: Good[] = [...goods];\n\n  if (options.sortField) {\n    preparedGoods.sort((good1, good2) => {\n      switch (options.sortField) {\n        case SortField.Name:\n          return good1.localeCompare(good2);\n\n        case SortField.Length:\n          return good1.length - good2.length;\n\n        default:\n          return 0;\n      }\n    });\n  }\n\n  if (options.isReversed) {\n    preparedGoods = preparedGoods.reverse();\n  }\n\n  return preparedGoods;\n}\n\nexport const App: React.FC = () => {\n  const [sortField, setSortField] = useState<SortField>(SortField.Default);\n  const [isReversed, setIsReversed] = useState(false);\n  const visibleGoods = getPreparedGoods(\n    goodsFromServer, { sortField, isReversed },\n  );\n\n  const isResetVisible = sortField || isReversed;\n\n  function reset() {\n    setIsReversed(false);\n    setSortField(SortField.Default);\n  }\n\n  return (\n    <div className=\"section content\">\n      <div className=\"buttons\">\n        <button\n          type=\"button\"\n          className={cn('button', 'is-info', {\n            'is-light': sortField !== SortField.Name,\n          })}\n          onClick={() => setSortField(SortField.Name)}\n        >\n          Sort alphabetically\n        </button>\n\n        <button\n          type=\"button\"\n          className={cn('button', 'is-success', {\n            'is-light': sortField !== SortField.Length,\n          })}\n          onClick={() => setSortField(SortField.Length)}\n        >\n          Sort by length\n        </button>\n\n        <button\n          type=\"button\"\n          className={cn('button', 'is-warning', {\n            'is-light': !isReversed,\n          })}\n          onClick={() => setIsReversed(!isReversed)}\n        >\n          Reverse\n        </button>\n\n        {isResetVisible && (\n          <button\n            type=\"button\"\n            className=\"button is-danger is-light\"\n            onClick={reset}\n          >\n            Reset\n          </button>\n        )}\n      </div>\n\n      <ul>\n        <ul>\n          {visibleGoods.map(good => (\n            <li data-cy=\"Good\" key={good.replaceAll(/\\W/g, '-')}>\n              {good}\n            </li>\n          ))}\n        </ul>\n      </ul>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}